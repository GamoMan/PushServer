// <auto-generated />
using KitsorLab.PushServer.Infastructure;
using KitsorLab.PushServer.Kernel.Models.Delivery;
using KitsorLab.PushServer.Kernel.Models.Subscription;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace KitsorLab.PushServer.Infastructure.Migrations
{
    [DbContext(typeof(PushServerDbContext))]
    [Migration("20180512154408_AddFKInDeliveryTable")]
    partial class AddFKInDeliveryTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KitsorLab.PushServer.Kernel.Models.Delivery.Delivery", b =>
                {
                    b.Property<long>("DeliveryKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("NotificationKey");

                    b.Property<DateTime?>("ScheduledOn");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<long>("SubscriptionKey");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("DeliveryKey");

                    b.HasIndex("NotificationKey");

                    b.HasIndex("SubscriptionKey");

                    b.HasIndex("Status", "ScheduledOn");

                    b.ToTable("Deliveries","pushServer");
                });

            modelBuilder.Entity("KitsorLab.PushServer.Kernel.Models.Notification.Notification", b =>
                {
                    b.Property<long>("NotificationKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(150);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("NotificationId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Url")
                        .HasMaxLength(255);

                    b.HasKey("NotificationKey");

                    b.HasIndex("NotificationId")
                        .IsUnique();

                    b.ToTable("Notifications","pushServer");
                });

            modelBuilder.Entity("KitsorLab.PushServer.Kernel.Models.Subscription.Subscription", b =>
                {
                    b.Property<long>("SubscriptionKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(255);

                    b.Property<string>("Endpoint");

                    b.Property<long?>("IP");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(90);

                    b.Property<string>("Token")
                        .HasMaxLength(25);

                    b.Property<byte>("Type");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("SubscriptionKey");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions","pushServer");
                });

            modelBuilder.Entity("KitsorLab.PushServer.Kernel.Models.Delivery.Delivery", b =>
                {
                    b.HasOne("KitsorLab.PushServer.Kernel.Models.Notification.Notification")
                        .WithMany()
                        .HasForeignKey("NotificationKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KitsorLab.PushServer.Kernel.Models.Subscription.Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
